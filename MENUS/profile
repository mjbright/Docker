#!/bin/bash 
#!/bin/sh 

DEBUG=0

################################################################################
## General functions:

die() {
    echo "$0: die - $*" >&2
    exit 1
}

pause() {
    [ ! -z "$1" ] && echo $*
    echo "Press <return> to continue [or q to quit]"
    read _DUMMY
    [ "$_DUMMY" = "q" ] && exit 0
    [ "$_DUMMY" = "Q" ] && exit 0
}

interrupt() {
    echo "you hit Ctrl-C/Ctrl-\, now continuing ..."
    exit 1
}

dtime() { date +%d-%b-%y_%Hh%Mm%Ss; }

# function called by trap
other_commands() {
    echo "\rSIGINT caught      "
    #printf "\rSIGINT caught      "
    sleep 1
    #printf "\rType a command >>> "
}
#trap 'interrupt' SIGINT SIGQUIT
trap 'other_commands' SIGINT SIGQUIT
#trap 'interrupt' SIGINT SIGQUIT
## set -x
## trap 'echo you hit Ctrl-C/Ctrl-\, now exiting..; exit' SIGINT SIGQUIT
## set +x


################################################################################
## Docker utulity functions:

# Remove only stopped containers:
RM() {
    RUNNING_DOCKER_IDS=`docker ps -q`
    DOCKER_IDS=`docker ps -q -a`

    # Do it this way to avoid error message for running ids:
    _IDS=""
    for ID in $DOCKER_IDS;do
        [ "${RUNNING_DOCKER_IDS##*$ID}" = "$RUNNING_DOCKER_IDS" ] &&
            _IDS="$_IDS $ID"
    done

    #echo "\$DOCKER_IDS='$DOCKER_IDS'"
    #echo "\$_IDS='$_IDS'"
    docker rm $_IDS
}

# Remove running and stopped containers:
RMALL() {
    #RUNNING_DOCKER_IDS=`docker ps | awk '!/^CONTAINER/ { print $1; }'`
    #DOCKER_IDS=`docker ps -a | awk '!/^CONTAINER/ { print $1; }'`
    RUNNING_DOCKER_IDS=`docker ps -q`
    DOCKER_IDS=`docker ps -q -a`
    echo; echo "CLEANUP: Stopping/Removing all containers";

    [ ! -z "$RUNNING_DOCKER_IDS" ] && {
        DEBUG "Stopping running containers";
        SHOW_DOCKER stop $DOCKER_IDS;
    }

    [ -z "$DOCKER_IDS" ] && {
        echo "No Docker containers";
        return 1;
    }

    #docker rm $(docker ps -a -q)

    SHOW_DOCKER rm $DOCKER_IDS
}

SHOW_DOCKER() {
     echo "docker $@"
     eval docker $@
}

GETLASTID() {
     docker ps -q -a -l
}

GETLASTFULLID() {
     docker ps -q -a -l --no-trunc
}

LIST() {
    echo; echo "Current running docker containers:"
    SHOW_DOCKER ps
}

LIST_ALL() {
    echo; echo "Current running/exited docker containers:"
    SHOW_DOCKER ps -a
}

PAUSE_DOCKER() {
     #pause "About to 'docker $*'"
     echo "docker $@"
     eval docker $@
     pause ""
}

BANNER() {
    echo; echo; echo; echo;
    echo "================================================================"
    #for LINE in $@;do echo "== $LINE"; done
    echo "== $@"
    echo "================================================================"
}

DEBUG() {
    [ $DEBUG -ne 0 ] && echo "DEBUG: $*"
}

DEBUG_BANNER() {
    [ $DEBUG -ne 0 ] && BANNER "$@"
}

SHOW_THREADS() {
     DOCKER_PID=`pstree -ap | perl -ne 'if (/docker,(\d+)/) { print $1; }'`
     pstree -apl $DOCKER_PID
}

